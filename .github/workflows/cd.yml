name: Release Build

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: Android
            os: ubuntu-latest
            build_cmd: flutter build apk --release
            artifact_path: build/app/outputs/flutter-apk/app-release.apk 
          - platform: macOS
            os: macos-latest
            build_cmd: flutter build macos --release
            artifact_path: build/macos/Build/Products/Release/Kiwi.app
          - platform: Windows
            os: windows-latest
            build_cmd: flutter build windows --release
            artifact_path: build\windows\x64\runner\Release
          - platform: Web
            os: ubuntu-latest
            build_cmd: flutter build web --release
            artifact_path: build/web
    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.29.3

      - name: Install macOS dependencies
        if: matrix.platform == 'macOS'
        run: |
          brew install cmake ninja pkg-config create-dmg

      - name: Install Windows dependencies
        if: matrix.platform == 'Windows'
        run: |
          choco install cmake ninja visualstudio2019buildtools visualstudio2019-workload-vctools innosetup

      - name: Enable desktop
        if: matrix.platform == 'macOS' || matrix.platform == 'Windows'
        run: |
          flutter config --enable-macos-desktop
          flutter config --enable-windows-desktop

      - name: Enable Web
        if: matrix.platform == 'Web'
        run: flutter config --enable-web

      - name: Install Dependencies
        run: |
          flutter pub get
          dart run build_runner build -d -v

      - name: Build for ${{ matrix.platform }}
        run: |
          flutter build ${{ matrix.platform == 'Android' && 'apk' || matrix.platform == 'Web' && 'web' || matrix.platform == 'macOS' && 'macos' || 'windows' }} --release

      - name: Archive Artifact for Android
        if: matrix.platform == 'Android'
        run: cp ${{ matrix.artifact_path }} Kiwi-Android.apk

      - name: Archive Artifact for macOS
        if: matrix.platform == 'macOS'
        run: |
          mkdir -p dmg
          cp -r ${{ matrix.artifact_path }} dmg/
          create-dmg \
            --volname "Kiwi" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Kiwi.app" 200 190 \
            --hide-extension "Kiwi.app" \
            --app-drop-link 600 185 \
            "Kiwi-macOS.dmg" \
            "dmg/"

      - name: Create Inno Setup Script
        if: matrix.platform == 'Windows'
        run: |
          $content = @"
          [Setup]
          AppName=Kiwi
          AppVersion=${{ github.ref_name }}
          AppPublisher=Fakingai Team
          AppPublisherURL=https://github.com/fakingai/kiwi-flutter
          AppSupportURL=https://github.com/fakingai/kiwi-flutter/issues
          AppUpdatesURL=https://github.com/fakingai/kiwi-flutter/releases
          WizardStyle=modern
          DefaultDirName={autopf}\kiwi
          DefaultGroupName=Kiwi
          OutputDir=.
          OutputBaseFilename=Kiwi-Windows
          Compression=lzma2/ultra64
          SolidCompression=no
          DisableStartupPrompt=yes
          DisableProgramGroupPage=yes
          UninstallDisplayIcon={app}\Kiwi.exe
          SetupIconFile=windows\runner\resources\app_icon.ico
          PrivilegesRequired=lowest
          
          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"
          
          [Files]
          Source: "build\windows\x64\runner\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          
          [Icons]
          Name: "{group}\Kiwi"; Filename: "{app}\Kiwi.exe"
          Name: "{commondesktop}\Kiwi"; Filename: "{app}\Kiwi.exe"; Tasks: desktopicon
          
          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"
          
          [Run]
          Filename: "{app}\Kiwi.exe"; Description: "{cm:LaunchProgram,Kiwi}"; Flags: nowait postinstall skipifsilent
          "@
          Set-Content -Path "installer.iss" -Value $content
        shell: pwsh

      - name: Build Installer
        if: matrix.platform == 'Windows'
        run: |
          & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' installer.iss
        shell: pwsh

      - name: Archive Artifact for Web
        if: matrix.platform == 'Web'
        run: |
          zip -r Kiwi-Web.zip ${{ matrix.artifact_path }}

      - name: Upload Artifact for Android
        if: matrix.platform == 'Android'
        uses: actions/upload-artifact@v4
        with:
          name: Android-artifact
          path: Kiwi-Android.apk

      - name: Upload Artifact for macOS
        if: matrix.platform == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: macOS-artifact
          path: Kiwi-macOS.dmg

      - name: Upload Artifact for Windows
        if: matrix.platform == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: Windows-artifact
          path: Kiwi-Windows.exe

      - name: Upload Artifact for Web
        if: matrix.platform == 'Web'
        uses: actions/upload-artifact@v4
        with:
          name: Web-artifact
          path: Kiwi-Web.zip

  release:
    name: Create GitHub Release and Upload Artifacts
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release and Upload Artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          files: |
            ./artifacts/Android-artifact/Kiwi-Android.apk
            ./artifacts/macOS-artifact/Kiwi-macOS.dmg
            ./artifacts/Windows-artifact/Kiwi-Windows.exe
            ./artifacts/Web-artifact/Kiwi-Web.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_web_to_cloudflare_pages:
    name: Deploy Web to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: release # Depends on the successful completion of the 'release' job
    permissions:
      contents: read    # May be needed by actions, e.g., checkout or if gitHubToken is used by pages-action
      deployments: write # Allows cloudflare/pages-action to create GitHub deployment statuses
    steps:
      - name: Download Web Artifact
        uses: actions/download-artifact@v4
        with:
          name: Web-artifact # Must match the 'name' used in 'upload-artifact' in the 'build' job
          path: ./cf-pages-artifact # Directory to download the artifact to

      - name: Create deployment target directory
        run: mkdir -p ./deploy_target

      - name: Unzip Web Artifact
        # The Kiwi-Web.zip artifact is created from the 'build/web' directory
        # and thus contains 'build/web/*' within it.
        # This command unzips it into './deploy_target', resulting in './deploy_target/build/web/*'.
        run: unzip ./cf-pages-artifact/Kiwi-Web.zip -d ./deploy_target

      - name: Verify unzipped structure (for debugging)
        run: |
          echo "Listing contents of downloaded artifact directory (cf-pages-artifact):"
          ls -R ./cf-pages-artifact
          echo "Listing contents of unzip target directory (deploy_target):"
          ls -R ./deploy_target
          echo "Listing contents of expected deployment root (deploy_target/build/web):"
          ls -R ./deploy_target/build/web || echo "Directory ./deploy_target/build/web not found or is empty."

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3 # Changed to wrangler-action
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          # projectName and directory are now part of the command
          command: pages deploy ./deploy_target/build/web --project-name='kiwi-flutter'
